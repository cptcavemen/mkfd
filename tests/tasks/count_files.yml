---
# The main playbook directories should have been created
# at this point. Try to find the directories one by one
# to test the results later.
- name: "SYS >> Query if directories were created"
  stat:
    path: "{{ item }}"
  register: PB_DIRS_STATE
  with_items: "{{ PB_DIRS }}"

# The list being iterated over should contain a dict, one
# per playbook directory discovered in the previous step. All
# of them must exist for this task to success.
- name: "SYS >> Ensure directories were created"
  assert:
    that: "item.stat.exists"
  with_items: "{{ PB_DIRS_STATE.results }}"

# Search for any text files containing the current DTG within the
# files/ directory. The role needs to know definitively whether files
# were created or not.
- name: "SYS >> Find resulting files from templating for DTG {{ DTG }}"
  find:
    path: "{{ playbook_dir }}/files"
    recurse: true
    patterns: "*{{ DTG }}.txt"
  register: GENERATED_FILES

# Depending on the situation, the number of expected files may vary.
# Ensure that the actual number of files on disk matches what was
# expected for the particular test case.
- name: "SYS >> Assert there are {{ num_files }} files"
  assert:
    that: "GENERATED_FILES.matched | int == num_files"
    msg: |-
      expected {{ num_files }} files after running templater
      saw {{ GENERATED_FILES.matched | int }} files

# Search for any ZIP archives containing the current DTG within the
# archives/ directory. The role needs to know definitively whether archives
# were created or not.
- name: "SYS >> Find resulting archives from templating for DTG {{ DTG }}"
  find:
    path: "{{ playbook_dir }}/archives"
    patterns: "*{{ DTG }}.zip"
  register: GENERATED_ARCH

# Depending on the situation, the number of expected archives may vary.
# Ensure that the actual number of archives on disk matches what was
# expected for the particular test case.
- name: "SYS >> Assert there are {{ num_archives }} archives"
  assert:
    that: "GENERATED_ARCH.matched | int == num_archives"
    msg: |-
      expected {{ num_archives }} archives after running templater
      saw {{ GENERATED_ARCH.matched | int }} archives

# Search for any checksum CSV files containing the current DTG within the
# files/ directory. The role needs to know definitively whether checksum
# CSVs were created or not.
- name: "SYS >> Find checksum CSV files from templating for DTG {{ DTG }}"
  find:
    path: "{{ playbook_dir }}/files"
    patterns: "*{{ DTG }}.csv"
  register: GENERATED_CSV

# Depending on the situation, the number of expected CSVs may vary.
# Ensure that the actual number of CSVs on disk matches what was
# expected for the particular test case.
- name: "SYS >> Assert there are {{ num_checksum }} checksum files"
  assert:
    that: "GENERATED_CSV.matched | int == num_checksum"
    msg: |-
      expected {{ num_checksum }} CSV checksum files after running templater
      saw {{ GENERATED_CSV.matched | int }} files

# The number of lines in the CSV should be equal to the number of
# files generated by the role. This includes config files, infrastructure
# files, and PDF documents.
- name: "BLOCK >> If CSV file exists, count the number of lines"
  block:
    # Open the CSV file and read it's contents into memory.
    - name: "SYS >> Read text from the input checksum CSV file"
      set_fact:
        LOOKUP_TEXT: "{{ lookup('file', GENERATED_CSV.files[0].path) }}"

    # Split the input on the \n character to get a list of strings,
    # one per line.
    - name: "SYS >> Count the number of lines in the checksum CSV file"
      set_fact:
        CHECKSUM_LINES: "{{ LOOKUP_TEXT.split('\n') | length }}"

    # Ensure the number of lines in the document equals the expected number.
    # Note that the expected number passed in from test.yml should account
    # for the column headers, which consumes 1 row.
    - name: "SYS >> Assert there are {{ num_checksum_lines }} lines in checksum"
      assert:
        that: "CHECKSUM_LINES | int == num_checksum_lines"
        msg: |-
          expected {{ num_checksum_lines }} checksums after running templater
          saw {{ CHECKSUM_LINES | int }} lines
  when: "GENERATED_CSV.matched | int == 1"

# Search for any documentation files containing the current DTG within the
# files/ directory. The role needs to know definitively whether documentation
# PDFs were created or not.
- name: "SYS >> Find documentation PDF files from templating for DTG {{ DTG }}"
  find:
    path: "{{ playbook_dir }}/files"
    patterns: "*{{ DTG }}.pdf"
    recurse: true
  register: GENERATED_PDF

# Depending on the situation, the number of expected PDFs may vary.
# Ensure that the actual number of PDFs on disk matches what was
# expected for the particular test case.
- name: "SYS >> Assert there are {{ num_doc }} PDF files"
  assert:
    that: "GENERATED_PDF.matched | int == num_doc"
    msg: |-
      expected {{ num_doc }} PDF doc files after running templater
      saw {{ GENERATED_PDF.matched | int }} files
...
