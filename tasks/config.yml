---
# For each entity, an output directory is created which directly houses the
# configuration and documentation files generated by the role. This task
# creates that list of string, which each string using the format shown below:
#   "/etc/ansible/(playbook)/files/(id)_(dtg)"
- name: "SYS >> Build list of config output directories"
  set_fact:
    CONFIG_DIRS: "{{ CONFIG_DIRS + ['{0}{1}_{2}'.format(PBF, item.id, DTG)] }}"
  with_items: "{{ entity_list }}"
  loop_control:
    label: "{{ item.id }}"

# Toggle debugging to print the list created above. This can be invoked
# by using the -v option at the command line when the playbook runs.
- name: "DEBUG >> Print CONFIG_DIRS output"
  debug:
    var: CONFIG_DIRS
    verbosity: "{{ debug_level }}"

# Iterate over the list of CONFIG_DIRS and create each one, since
# each entity needs a place to store its outputs.
- name: "SYS >> Ensure config output directories exist"
  file:
    path: "{{ item }}"
    state: directory
  with_items: "{{ CONFIG_DIRS }}"

# Search the PBCT path "/etc/ansible/(playbook)/config_templates/"
# for specific Jinja2 files, typically ending in .j2 or .jinja2 as
# defined in the role defaults. Store the resulting list for
# future processing in "make_config.yml".
- name: "SYS >> Get playbook config templates"
  find:
    path: "{{ PBCT }}"
    patterns: "{{ j2_patterns }}"
  register: PBCT_LIST

# Toggle debugging to print the list created above. This can be invoked
# by using the -v option at the command line when the playbook runs.
- name: "DEBUG >> Print PBCT_LIST output"
  debug:
    var: PBCT_LIST
    verbosity: "{{ debug_level }}"

# Iteratively invoke "make_config.yml" which is similar to a function
# call in traditional programming. The loop walks over two lists in parallel:
#   - The list of entities whereby each component dict is seen as item.0
#   - The list of config directories; each component string is seen as item.1
- include_tasks: "make_config.yml"
  with_together:
    - "{{ entity_list }}"
    - "{{ CONFIG_DIRS }}"
  loop_control:
    label: "id:{{ item.0.id }} config_dir:{{ item.1 }}"
...
