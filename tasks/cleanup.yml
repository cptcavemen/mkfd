---
# The PBF_LIST variable, before this task is invoked, includes the
# config files and PDF documentation generated by the role thus far.
# This task adds the infrastructure template paths to the list for future
# checksum processing.
- name: "SYS >> Combine config PBF list and infra text PBF lists (results)"
  set_fact:
    PBF_LIST: "{{ PBF_LIST + PBF_LIST_INFRA.results }}"

# Toggle debugging to print the list created above. This can be invoked
# by using the -v option at the command line when the playbook runs.
- name: "DEBUG >> Print PBF_LIST output after combining with infra"
  debug:
    var: "PBF_LIST"
    verbosity: "{{ debug_level }}"

# Text and PDF outputs from this role are seldom modified. To provide
# improved security, the role generates a CSV spreadsheet containing each
# filename and its SHA256 hash to ensure file integrity. The block
# is only executed when 'skip_sha256' is false, which is the default.
# Skipping SHA256 is only recommended during development to reduce
# role execution time.
- name: "BLOCK >> Execute tasks relevant to SHA256 hashing"
  block:
    # Iterate over all of the dictionaries in PBF_LIST, which now contains
    # all config files, infra files, and PDF docs. The hashes are
    # stored in a variable called PBF_CHECKSUMS.
    - name: "SYS >> Get SHA256 checksums from config/infra text files"
      stat:
        get_attributes: false
        get_md5: false
        get_mime: false
        checksum_algorithm: "sha256"
        path: "{{ PATH }}"
      register: "PBF_CHECKSUMS"
      when: "not item.skipped is defined or not item.skipped"
      vars:
        PATH: "{{ item.dest | default(item.path) }}"
      loop: "{{ PBF_LIST }}"
      loop_control:
        label: "path:{{ PATH }}"

    # Toggle debugging to print the list created above. This can be invoked
    # by using the -v option at the command line when the playbook runs.
    - name: "DEBUG >> Print PBF_CHECKSUMS output"
      debug:
        var: "PBF_CHECKSUMS"
        verbosity: "{{ debug_level }}"

    # Using the 'checksum.j2' template included with the role, write the
    # hashes to disk. See the templates/ directory.
    # This template rolls up all output files from the
    # templater run and is not generated per entity. This is seldom
    # provided to customers but can be used internally when transferring
    # files over untrusted or unreliable networks.
    - name: "SYS >> Save SHA256 checksums as CSV"
      template:
        src: "checksum.j2"
        dest: "{{ PBF }}checksum_{{ DTG }}.csv"
        mode: "{{ file_mode }}"
      when: "PBF_CHECKSUMS.results | length > 0"
  when: "not skip_sha256"

# Finds all files with a common timestamp for inclusion into a Windows
# ZIP bundle. The name of the bundle is controlled by 'zip_name' which is
# set to 'archive' in the role defaults. Files pulled into the archive are
# deleted for cleanliness. This task only executes when 'make_zip' is true;
# by default, it is false. The format of the archive is as follows:
#   "/etc/ansible/(playbook)/archives/(zip_name)_(dtg).zip"
#
# This task also notifies a handler called 'archive_handler' which performs
# additional cleanup, such as removing directories, copying the archive,
# and potentially deleting the archive. See the handlers/ directory.
- name: "SYS >> Archive all output files containing DTG '{{ DTG }}'"
  archive:
    path: "{{ PBF }}*{{ DTG }}*"
    dest: "{{ PBA }}{{ zip_name }}_{{ DTG }}.{{ zip_format }}"
    format: "{{ zip_format }}"
    mode: "{{ file_mode }}"
    remove: true
  when: "make_zip"
  notify: "archive_handler"

# Because roles can be included multiple times within a single playbook
# using 'include_role', run-specific data might be accidentally carried
# between runs. This task clears out all lists to ensure append operations
# do not accidentally include stale data.
- name: "SYS >> Clear all variables for future templater role includes"
  set_fact:
    PBF_CHECKSUMS: []
    PBCT_LIST: []
    PBF_LIST_DOC: []
    PBIT_LIST: []
    PBF_LIST_INFRA: []
    PBF_LIST_CONFIG: []
    PB_PRE_CHECK: []
    PBF_LIST: []
    CONFIG_DIRS: []
...
